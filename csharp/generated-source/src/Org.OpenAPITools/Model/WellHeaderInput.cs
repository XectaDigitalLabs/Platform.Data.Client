/*
 * Production API
 *
 * API exposing endpoints for managing well headers and daily production.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WellHeaderInput
    /// </summary>
    [DataContract(Name = "WellHeaderInput")]
    public partial class WellHeaderInput : IEquatable<WellHeaderInput>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PRODUCER for value: PRODUCER
            /// </summary>
            [EnumMember(Value = "PRODUCER")]
            PRODUCER = 1,

            /// <summary>
            /// Enum INJECTOR for value: INJECTOR
            /// </summary>
            [EnumMember(Value = "INJECTOR")]
            INJECTOR = 2

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines Fluid
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FluidEnum
        {
            /// <summary>
            /// Enum OIL for value: OIL
            /// </summary>
            [EnumMember(Value = "OIL")]
            OIL = 1,

            /// <summary>
            /// Enum GAS for value: GAS
            /// </summary>
            [EnumMember(Value = "GAS")]
            GAS = 2,

            /// <summary>
            /// Enum WATER for value: WATER
            /// </summary>
            [EnumMember(Value = "WATER")]
            WATER = 3

        }

        /// <summary>
        /// Gets or Sets Fluid
        /// </summary>
        [DataMember(Name = "fluid", IsRequired = true, EmitDefaultValue = false)]
        public FluidEnum Fluid { get; set; }
        /// <summary>
        /// Defines LiftType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LiftTypeEnum
        {
            /// <summary>
            /// Enum NATURALFLOW for value: NATURAL_FLOW
            /// </summary>
            [EnumMember(Value = "NATURAL_FLOW")]
            NATURALFLOW = 1,

            /// <summary>
            /// Enum GASLIFT for value: GAS_LIFT
            /// </summary>
            [EnumMember(Value = "GAS_LIFT")]
            GASLIFT = 2,

            /// <summary>
            /// Enum ELECTRICSUBMERSIBLEPUMP for value: ELECTRIC_SUBMERSIBLE_PUMP
            /// </summary>
            [EnumMember(Value = "ELECTRIC_SUBMERSIBLE_PUMP")]
            ELECTRICSUBMERSIBLEPUMP = 3,

            /// <summary>
            /// Enum RODLIFT for value: ROD_LIFT
            /// </summary>
            [EnumMember(Value = "ROD_LIFT")]
            RODLIFT = 4,

            /// <summary>
            /// Enum PLUNGER for value: PLUNGER
            /// </summary>
            [EnumMember(Value = "PLUNGER")]
            PLUNGER = 5

        }

        /// <summary>
        /// Gets or Sets LiftType
        /// </summary>
        [DataMember(Name = "liftType", IsRequired = true, EmitDefaultValue = false)]
        public LiftTypeEnum LiftType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WellHeaderInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WellHeaderInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WellHeaderInput" /> class.
        /// </summary>
        /// <param name="uwi">uwi (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="group">group (required).</param>
        /// <param name="field">field (required).</param>
        /// <param name="route">route (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="fluid">fluid (required).</param>
        /// <param name="liftType">liftType (required).</param>
        /// <param name="lat">lat (required).</param>
        /// <param name="lon">lon (required).</param>
        public WellHeaderInput(string uwi = default(string), string name = default(string), string group = default(string), string field = default(string), string route = default(string), TypeEnum type = default(TypeEnum), FluidEnum fluid = default(FluidEnum), LiftTypeEnum liftType = default(LiftTypeEnum), double lat = default(double), double lon = default(double))
        {
            // to ensure "uwi" is required (not null)
            this.Uwi = uwi ?? throw new ArgumentNullException("uwi is a required property for WellHeaderInput and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for WellHeaderInput and cannot be null");
            // to ensure "group" is required (not null)
            this.Group = group ?? throw new ArgumentNullException("group is a required property for WellHeaderInput and cannot be null");
            // to ensure "field" is required (not null)
            this.Field = field ?? throw new ArgumentNullException("field is a required property for WellHeaderInput and cannot be null");
            // to ensure "route" is required (not null)
            this.Route = route ?? throw new ArgumentNullException("route is a required property for WellHeaderInput and cannot be null");
            this.Type = type;
            this.Fluid = fluid;
            this.LiftType = liftType;
            this.Lat = lat;
            this.Lon = lon;
        }

        /// <summary>
        /// Gets or Sets Uwi
        /// </summary>
        [DataMember(Name = "uwi", IsRequired = true, EmitDefaultValue = false)]
        public string Uwi { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", IsRequired = true, EmitDefaultValue = false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// Gets or Sets Route
        /// </summary>
        [DataMember(Name = "route", IsRequired = true, EmitDefaultValue = false)]
        public string Route { get; set; }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name = "lat", IsRequired = true, EmitDefaultValue = false)]
        public double Lat { get; set; }

        /// <summary>
        /// Gets or Sets Lon
        /// </summary>
        [DataMember(Name = "lon", IsRequired = true, EmitDefaultValue = false)]
        public double Lon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WellHeaderInput {\n");
            sb.Append("  Uwi: ").Append(Uwi).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Fluid: ").Append(Fluid).Append("\n");
            sb.Append("  LiftType: ").Append(LiftType).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WellHeaderInput);
        }

        /// <summary>
        /// Returns true if WellHeaderInput instances are equal
        /// </summary>
        /// <param name="input">Instance of WellHeaderInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WellHeaderInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uwi == input.Uwi ||
                    (this.Uwi != null &&
                    this.Uwi.Equals(input.Uwi))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Route == input.Route ||
                    (this.Route != null &&
                    this.Route.Equals(input.Route))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Fluid == input.Fluid ||
                    this.Fluid.Equals(input.Fluid)
                ) && 
                (
                    this.LiftType == input.LiftType ||
                    this.LiftType.Equals(input.LiftType)
                ) && 
                (
                    this.Lat == input.Lat ||
                    this.Lat.Equals(input.Lat)
                ) && 
                (
                    this.Lon == input.Lon ||
                    this.Lon.Equals(input.Lon)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uwi != null)
                    hashCode = hashCode * 59 + this.Uwi.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.Route != null)
                    hashCode = hashCode * 59 + this.Route.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Fluid.GetHashCode();
                hashCode = hashCode * 59 + this.LiftType.GetHashCode();
                hashCode = hashCode * 59 + this.Lat.GetHashCode();
                hashCode = hashCode * 59 + this.Lon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Uwi (string) maxLength
            if(this.Uwi != null && this.Uwi.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Uwi, length must be less than 16.", new [] { "Uwi" });
            }

            // Uwi (string) minLength
            if(this.Uwi != null && this.Uwi.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Uwi, length must be greater than 0.", new [] { "Uwi" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 50.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

            // Group (string) maxLength
            if(this.Group != null && this.Group.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Group, length must be less than 50.", new [] { "Group" });
            }

            // Group (string) minLength
            if(this.Group != null && this.Group.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Group, length must be greater than 0.", new [] { "Group" });
            }

            // Field (string) maxLength
            if(this.Field != null && this.Field.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Field, length must be less than 50.", new [] { "Field" });
            }

            // Field (string) minLength
            if(this.Field != null && this.Field.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Field, length must be greater than 0.", new [] { "Field" });
            }

            // Route (string) maxLength
            if(this.Route != null && this.Route.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Route, length must be less than 5.", new [] { "Route" });
            }

            // Route (string) minLength
            if(this.Route != null && this.Route.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Route, length must be greater than 0.", new [] { "Route" });
            }

            yield break;
        }
    }

}
